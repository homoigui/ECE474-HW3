`timescale 1ns / 1ps

module HLSM (Clk, Rst, Start, Done, u, x, y, dx, a, three, u1, x1, y1, c);
	input signed [31:0] u, x, y, dx, a, three;
	output reg signed [31:0] u1, x1, y1, c;
	reg signed [31:0] t1, t2, t3, t4, t5, t6, t7, vx1;
	input Clk, Rst, Start;
	output reg Done;

	localparam STATE_WAIT = 3'd0,
	           STATE_1 = 3'd1,
	           STATE_2 = 3'd2,
	           STATE_3 = 3'd3,
	           STATE_4 = 3'd4,
	           STATE_5 = 3'd5,
	           STATE_6 = 3'd6,
	           STATE_7 = 3'd7,
	           STATE_8 = 3'd8,
	           STATE_9 = 3'd9,
	           STATE_10 = 3'd10,
	           STATE_FINAL = 3'd11;

	reg [3:0] State;

	always@ (posedge Clk) begin
		if (Rst == 1'b1) begin
			State <= STATE_WAIT;
			Done <= 0;
			u1 <= 0;
			x1 <= 0;
			y1 <= 0;
			c <= 0;
		end
		else begin
		case (State)
			STATE_WAIT: begin
				Done <= 0;
				if (Start == 1'b1) begin
					State <= STATE_1;
				end
				else begin
					State <= STATE_WAIT;
				end
			end
			STATE_1: begin
				vx1 <= x + dx;
				t1 <= three * x;

				State <= STATE_2;
			end
			STATE_2: begin
				x1 <= x + dx;

				State <= STATE_3;
			end
			STATE_3: begin
				t2 <= u * dx;
				c <= vx1 < a;

				State <= STATE_4;
			end
			STATE_4: begin

				State <= STATE_5;
			end
			STATE_5: begin
				t5 <= three * y;

				State <= STATE_6;
			end
			STATE_6: begin

				State <= STATE_7;
			end
			STATE_7: begin
				t3 <= t1 * t2;

				State <= STATE_8;
			end
			STATE_8: begin
				t6 <= t5 * dx;
				t7 <= u * dx;

				State <= STATE_9;
			end
			STATE_9: begin
				t4 <= u - t3;

				State <= STATE_10;
			end
			STATE_10: begin
				u1 <= t4 - t6;
				y1 <= y + t7;

				State <= STATE_FINAL;
			end
			STATE_FINAL: begin
				Done <= 1'b1;
				State <= STATE_WAIT;
			end
			default: State <= STATE_WAIT;
		endcase
		end
	end
endmodule